name: Develop

on:
  pull_request:
    branches:
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-and-test:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install dependencies
        shell: bash
        run: |
            sudo apt-get update
            sudo apt-get install -y curl ninja-build zlib1g-dev
            sudo apt-get clean
            sudo rm -rf /var/lib/apt/lists/*

      - name: Install OpenCV 4
        shell: bash
        run: |
          curl -L https://ion-archives.s3-us-west-2.amazonaws.com/genesis-runtime/OpenCV-4.5.2-x86_64-gcc75.sh -o $HOME/opencv_installer.sh
          sudo sh $HOME/opencv_installer.sh --prefix=/usr/ --skip-license

      - name: Download Halide package
        shell: bash
        run: |
            mkdir ${HOME}/halide
            curl -L https://github.com/halide/Halide/releases/download/v12.0.1/Halide-12.0.1-x86-64-linux-5dabcaa9effca1067f907f6c8ea212f3d2b1d99a.tar.gz | tar zx -C ${HOME}/halide --strip-components 1
            find ${HOME}/halide -type d | xargs chmod 755
            sudo cp -r ${HOME}/halide/* /usr/

      - name: Download onnxruntime package
        shell: bash
        run: |
            mkdir ${HOME}/onnxruntime
            curl -L https://github.com/microsoft/onnxruntime/releases/download/v1.8.1/onnxruntime-linux-x64-1.8.1.tgz | tar zx -C ${HOME}/onnxruntime --strip-components 1
            find ${HOME}/onnxruntime -type d | xargs chmod 755
            sudo cp -r ${HOME}/onnxruntime/* /usr/

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/ion-kit/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/ion-kit/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWITH_CUDA=OFF $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{runner.workspace}}/ion-kit/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{runner.workspace}}/ion-kit/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest --verbose -v -C $BUILD_TYPE
